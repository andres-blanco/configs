if empty(glob('~/.vim/autoload/plug.vim'))
    silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
                \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    autocmd VimEnter * PlugInstall --sync | source $HOME/.vimrc
endif

if !exists('g:os')
    if has('win32') || has('win16')
        let g:os = 'Windows'
    else
        let g:os = substitute(system('uname'), '\n', '', '')
    endif
endif

call plug#begin('~/.vim/plugged')

Plug 'git://github.com/tpope/vim-surround.git'
Plug 'git://github.com/tpope/vim-tbone.git'
Plug 'https://github.com/ctrlpvim/ctrlp.vim'
Plug 'git://github.com/tpope/vim-commentary.git'
Plug 'git://github.com/tpope/vim-repeat.git'
Plug 'git://github.com/christoomey/vim-tmux-navigator.git'
Plug 'tomlion/vim-solidity'
Plug 'git://github.com/posva/vim-vue.git'

if g:os == 'Darwin'
    Plug 'https://github.com/Valloric/YouCompleteMe.git'
endif

call plug#end()

" Usar clipboard del SO
set clipboard=unnamed


if has('autocmd')
    filetype plugin indent on
endif
if has('syntax') && !exists('g:syntax_on')
    syntax enable
endif

colorscheme delek

set number
set autoindent
set backspace=indent,eol,start
set complete-=i
set tabstop=4 softtabstop=0 expandtab shiftwidth=4 smarttab
set nrformats-=octal
set incsearch
set smartcase
" Use <C-L> to clear the highlighting of :set hlsearch.
if maparg('<C-L>', 'n') ==# ''
    nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>
endif

set laststatus=2
set ruler
set wildmenu
if !&scrolloff
    set scrolloff=1
endif
if !&sidescrolloff
    set sidescrolloff=5
endif
set display+=lastline

" Para usar hacer :set [no]list
if &listchars ==# 'eol:$'
    set listchars=tab:>\ ,trail:-,extends:>,precedes:<,nbsp:+
endif

if v:version > 703 || v:version == 703 && has("patch541")
    set formatoptions+=j " Delete comment character when joining commented lines
endif

set autoread

if &history < 1000
    set history=1000
endif
if &tabpagemax < 50
    set tabpagemax=50
endif

" Allow color schemes to do bright colors without forcing bold.
if &t_Co == 8 && $TERM !~# '^linux\|^Eterm'
    set t_Co=16
endif


" Load matchit.vim, but only if the user hasn't installed a newer version.
if !exists('g:loaded_matchit') && findfile('plugin/matchit.vim', &rtp) ==# ''
    runtime! macros/matchit.vim
endif

inoremap <C-U> <C-G>u<C-U>

" Keep screeds of undo history
set undolevels=2000

let mapleader = ","
noremap <leader>a <C-a>
noremap <leader>x <C-x>

if g:os == 'Darwin'
    nnoremap <leader>j :YcmCompleter GoToDeclaration <CR>
    nnoremap <leader>gd :YcmCompleter GoTo <CR>
    nnoremap <leader>vd :vsplit <CR> :YcmCompleter GoTo <CR>
endif
" Change and delete with C and D both cut off the remainder of the line from
" the cursor, but Y yanks the whole line, which is inconsistent (and can be
" done with yy anyway); this fixes it so it only yanks the rest of the line
nnoremap Y y$

" Window Bindings
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l
noremap <C-m> <C-w>\| <C-w>_
noremap <C-n> <C-w>=

" CtrlP bindings
let g:ctrlp_custom_ignore = '\v[\/]\.?(node_modules|dist|libpd|cocos2d|proj.*|git|hg|svn)$'
let g:ctrlp_map = '<C-p>'
let g:ctrlp_cmd = 'CtrlP'

" Fastlane syntax
au BufNewFile,BufRead Appfile set ft=ruby
au BufNewFile,BufRead Deliverfile set ft=ruby
au BufNewFile,BufRead Fastfile set ft=ruby
au BufNewFile,BufRead Gymfile set ft=ruby
au BufNewFile,BufRead Matchfile set ft=ruby
au BufNewFile,BufRead Snapfile set ft=ruby
au BufNewFile,BufRead Scanfile set ft=ruby

"if g:os == 'Linux'
"    " linux stuff
"endif

